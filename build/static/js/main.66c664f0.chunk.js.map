{"version":3,"sources":["titles.js","form.js","weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","className","Form","onSubmit","loadWeather","type","name","placeholder","Weather","country","city","temperature","humidity","description","error","Api_Key","App","state","undefined","getWeather","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","titles","src_form","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.66c664f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = props => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title-container__title\">Weather Scanner </h1>\r\n      <p className=\"title-container__subtitle\">\r\n        {\" \"}\r\n        Helps you find weather conditions in cities...{\" \"}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form onSubmit={props.loadWeather}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n      <button>Get Weather</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"weather-info\">\r\n      {props.country && props.city && (\r\n        <p className=\"weather__key\">\r\n          Location:{\" \"}\r\n          <span className=\"weather__value\">\r\n            {props.city}, {props.country}\r\n          </span>\r\n        </p>\r\n      )}\r\n      {props.temperature && (\r\n        <p className=\"weather__key\">\r\n          Temperature:{\" \"}\r\n          <span className=\"weather__value\"> {props.temperature}</span>\r\n        </p>\r\n      )}\r\n      {props.humidity && (\r\n        <p className=\"weather__key\">\r\n          Humidity:\r\n          <span className=\"weather__value\"> {props.humidity}</span>\r\n        </p>\r\n      )}\r\n      {props.description && (\r\n        <p className=\"weather__key\">\r\n          Conditions:\r\n          <span className=\"weather__value\"> {props.description}</span>\r\n        </p>\r\n      )}\r\n      {props.error && <p className=\"weather__error\">{props.error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Titles from \"./titles\";\nimport Form from \"./form\";\nimport Weather from \"./weather\";\n\nimport \"./App.css\";\n\nconst Api_Key = \"295577675bccfbc8e62f0cc91c2d62a1\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  //getWeather is a method we'll use to make the api call\n  getWeather = async e => {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n    );\n    const response = await api_call.json();\n    console.log(response);\n\n    if (city && country) {\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({ error: \"Please enter the city and country...\" });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"col-xs-5 title-container\">\n                <Titles />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form loadWeather={this.getWeather} />\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}